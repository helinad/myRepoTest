<?xml version="1.0" encoding="utf-8"?>
<resources>
    <declare-styleable name="TreeViewList">
	    <attr name="collapsible" format="boolean" />
		<attr name="src_expanded" format="reference|color" />
		<attr name="src_collapsed" format="reference|color" />
        <attr name="indent_width" format="dimension" />
        <attr name="handle_trackball_press" format="boolean" />
		<attr name="indicator_gravity">
			<!-- Push object to the top of its container, not changing its size. -->
			<flag name="top" value="0x30" />
			<!-- Push object to the bottom of its container, not changing its size. -->
			<flag name="bottom" value="0x50" />
			<!-- Push object to the left of its container, not changing its size. -->
			<flag name="left" value="0x03" />
			<!-- Push object to the right of its container, not changing its size. -->
			<flag name="right" value="0x05" />
			<!-- Place object in the vertical center of its container, not changing its size. -->
			<flag name="center_vertical" value="0x10" />
			<!-- Grow the vertical size of the object if needed so it completely fills its container. -->
			<flag name="fill_vertical" value="0x70" />
			<!-- Place object in the horizontal center of its container, not changing its size. -->
			<flag name="center_horizontal" value="0x01" />
			<!-- Grow the horizontal size of the object if needed so it completely fills its container. -->
			<flag name="fill_horizontal" value="0x07" />
			<!-- Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. -->
			<flag name="center" value="0x11" />
			<!-- Grow the horizontal and vertical size of the object if needed so it completely fills its container. -->
			<flag name="fill" value="0x77" />
			<!-- Additional option that can be set to have the top and/or bottom edges of the child clipped to its container's bounds.
				The clip will be based on the vertical gravity: a top gravity will clip the bottom edge, a bottom gravity will clip the top
				edge, and neither will clip both edges. -->
			<flag name="clip_vertical" value="0x80" />
			<!-- Additional option that can be set to have the left and/or right edges of the child clipped to its container's bounds.
				The clip will be based on the horizontal gravity: a left gravity will clip the right edge, a right gravity will clip the
				left edge, and neither will clip both edges. -->
			<flag name="clip_horizontal" value="0x08" />
		</attr>
        <attr name="indicator_background" format="reference|color" />
        <attr name="row_background" format="reference|color" />
	</declare-styleable>
	
    
     <declare-styleable name="MySwitch">
        <!-- Drawable to use as the "thumb" that switches back and forth. -->
        <attr name="thumb"  format="reference"/>
        <!-- Drawable to use as the "track" that the switch thumb slides within. -->
        <attr name="track" format="reference" />
        <!-- Text to use when the switch is in the checked/"on" state. -->
        <attr name="textOn" format="reference|string" />
        <!-- Text to use when the switch is in the unchecked/"off" state. -->
        <attr name="textOff" format="reference|string" />
        
        <!-- drawablw to use when the switch is in the checked/"on" state. -->
        <attr name="drawableOn" format="reference" />
        <!-- drawablw to use when the switch is in the unchecked/"off" state. -->
        <attr name="drawableOff" format="reference" />
        
        <!-- if the switch should operate like iOS UISwitch -->
        <attr name="pushStyle" format="boolean" />
        <!-- if text should be drawn on the Thumb or On the track. -->
        <attr name="textOnThumb" format="boolean" />
        <!-- if the thumb should be allowed to move more beyond the switch boundaries -->
        <attr name="thumbExtraMovement" format="dimension" />
        <!-- Amount of padding on either side of text within the switch thumb. -->
        <attr name="thumbTextPadding" format="dimension" />
        <!-- Amount of padding on either side of text within the switch track. -->
        <attr name="trackTextPadding" format="dimension" />
        <!-- TextAppearance style for text displayed on the switch thumb. -->
        <attr name="switchTextAppearanceAttrib" format="reference" />
        <!-- Minimum width for the switch component -->
        <attr name="switchMinWidth" format="dimension" />
        <!-- Minimum height for the switch component -->
        <attr name="switchMinHeight" format="dimension" />
        <!-- Minimum space between the switch and caption text -->
        <attr name="switchPadding" format="dimension" />
        
        <attr name="orientation" >
            <!-- the switch moves only on the x-axis(horizontally) -->
            <enum name="horizontal" value="1" />
            <!-- the switch moves only on the y-axis(vertically) -->
            <enum name="vertical" value="0" />
        </attr>
        
        <!-- the track drawable will be drawn on top of these background. So if
             these back grounds were to be visible, the track has to have transparency -->
        <!-- The background when left side of the switch is visible -->
        <attr name="leftBackground" format="reference"/>
        
        <!-- The background when right side of the switch is visible -->
        <attr name="rightBackground" format="reference"/>
        
        <!-- We need a mask drawable to mask the background, then draw the track -->
        <attr name="backgroundMask" format="reference"/>
    </declare-styleable>
    
    <declare-styleable name="mySwitchTextAppearanceAttrib">
        <!-- Text color. -->
        <attr name="textColor" format="color" />
        <!-- Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp). -->
        <attr name="textSize"  format="dimension" />
        <!-- Style (bold, italic, bolditalic) for the text. -->
        <attr name="textStyle" >
            <flag name="normal" value="0" />
            <flag name="bold" value="1" />
            <flag name="italic" value="2" />
        </attr>
        
        <!-- Typeface (normal, sans, serif, monospace) for the text. -->
        <attr name="typeface" format="reference">
            <enum name="normal" value="0" />
            <enum name="sans" value="1" />
            <enum name="serif" value="2" />
            <enum name="monospace" value="3" />
        </attr>
        <!-- Color of the text selection highlight. -->
        <attr name="textColorHighlight" format="color" />
        <!-- Color of the hint text. -->
        <attr name="textColorHint" format="color" />
        <!-- Color of the links. -->
        <attr name="textColorLink" format="color" />
        <!-- Present the text in ALL CAPS. This may use a small-caps form when available. -->
        <attr name="textAllCaps" format="boolean" />
    </declare-styleable>
    <!-- Default style for the Switch widget. -->
     <attr name="mySwitchStyleAttr" format="reference" />
     
     
     <!-- Defines the custom XML attributes supported for a HorizontalListView -->
    <declare-styleable name="HorizontalListView">
        <attr name="dividerWidth" format="dimension" />
        <attr name="android:divider" />
        <attr name="android:requiresFadingEdge" />
        <attr name="android:fadingEdgeLength" />
    </declare-styleable>
</resources>
